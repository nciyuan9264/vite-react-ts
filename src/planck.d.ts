declare class Vec2 {
    x: number;
    y: number;
    constructor(x: number, y: number);
    constructor(obj: {
        x: number;
        y: number;
    });
    constructor();
    static zero(): Vec2;
    static clone(v: Vec2): Vec2;
    static isValid(obj: any): boolean;
    static assert(o: any): void;
    clone(): Vec2;
    setZero(): Vec2;
    set(x: number, y: number): Vec2;
    set(value: Vec2): Vec2;
    setNum(x: number, y: number): this;
    setVec2(value: Vec2): this;
    setCombine(a: number, v: Vec2, b: number, w: Vec2): Vec2;
    setMul(a: number, v: Vec2): Vec2;
    add(w: Vec2): Vec2;
    addCombine(a: number, v: Vec2, b: number, w: Vec2): Vec2;
    addMul(a: number, v: Vec2): Vec2;
    wSub(a: number, v: Vec2, b?: number, w?: Vec2): Vec2;
    subCombine(a: number, v: Vec2, b: number, w: Vec2): Vec2;
    subMul(a: number, v: Vec2): Vec2;
    sub(w: Vec2): Vec2;
    mul(m: number): Vec2;
    length(): number;
    lengthSquared(): number;
    normalize(): number;
    static lengthOf(v: Vec2): number;
    static lengthSquared(v: Vec2): number;
    static distance(v: Vec2, w: Vec2): number;
    static distanceSquared(v: Vec2, w: Vec2): number;
    static areEqual(v: Vec2, w: Vec2): boolean;
    static skew(v: Vec2): Vec2;
    static dot(v: Vec2, w: Vec2): number;
    static cross(v: Vec2, w: Vec2): number;
    static cross(v: Vec2, w: number): Vec2;
    static cross(v: number, w: Vec2): Vec2;
    static crossVec2Vec2(v: Vec2, w: Vec2): number;
    static crossVec2Num(v: Vec2, w: number): Vec2;
    static crossNumVec2(v: number, w: Vec2): Vec2;
    static addCross(a: Vec2, v: Vec2, w: number): Vec2;
    static addCross(a: Vec2, v: number, w: Vec2): Vec2;
    static addCrossVec2Num(a: Vec2, v: Vec2, w: number): Vec2;
    static addCrossNumVec2(a: Vec2, v: number, w: Vec2): Vec2;
    static add(v: Vec2, w: Vec2): Vec2;
    static combine(a: number, v: Vec2, b: number, w: Vec2): Vec2;
    static sub(v: Vec2, w: Vec2): Vec2;
    static mul(a: Vec2, b: number): Vec2;
    static mul(a: number, b: Vec2): Vec2;
    static mulVec2Num(a: Vec2, b: number): Vec2;
    static mulNumVec2(a: number, b: Vec2): Vec2;
    neg(): Vec2;
    static neg(v: Vec2): Vec2;
    static abs(v: Vec2): Vec2;
    static mid(v: Vec2, w: Vec2): Vec2;
    static upper(v: Vec2, w: Vec2): Vec2;
    static lower(v: Vec2, w: Vec2): Vec2;
    clamp(max: number): Vec2;
    static clamp(v: Vec2, max: number): Vec2;
}
type BodyType = "static" | "kinematic" | "dynamic";
interface BodyDef {
    type?: BodyType;
    position?: Vec2;
    angle?: number;
    linearVelocity?: Vec2;
    angularVelocity?: number;
    linearDamping?: number;
    angularDamping?: number;
    fixedRotation?: boolean;
    bullet?: boolean;
    gravityScale?: number;
    allowSleep?: boolean;
    awake?: boolean;
    active?: boolean;
    userData?: any;
}

export {BodyDef}